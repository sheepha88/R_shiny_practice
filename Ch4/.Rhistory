install.packages("vroom")
install.packages("tidyverse")
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/data.R/"
download.file(paste0(url, name), paste0("neiss/data.R/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
url <- "https://github.com/hadley/mastering-shiny/blob/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/blob/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/blob/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/products.tsv")
injuries
injuries <- data.table::("neiss/injuries.tsv.gz")
injuries
injuries <- data.table::address("neiss/injuries.tsv.gz")
injuries
injuries <- data.frame("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
dir.create("neiss")
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/blob/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
download("population.tsv")
download("products.tsv")
products <- vroom::vroom("neiss/products.tsv")
products
products <- vroom::vroom("neiss/products.tsv")
products
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
selected <- injuries %>% filter(prod_code == 649)
nrow(selected)
selected %>% count(location, wt = weight, sort = TRUE)
summary <- selected %>%
count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
selected
population
population <- vroom::vroom("neiss/population.tsv")
population
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
source("C:/R_Shiny_prac/R_shiny/Ch4/app.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
injuries <- vroom::vroom("neiss/population.tsv")
injuries
injuries <- vroom::vroom("neiss/population.tsv")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
runApp()
runApp()
runApp()
#<< ui
prod_code <- setNames(products$prod_code, products$title)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
#<< ui
prod_code <- setNames(products$prod_code, products$title)
prod_code
products
runApp()
runApp()
selected()
selected
# 프로토타입
# 하나의 입력 , 3개의 테이블 , 1개의 plot
# fluidrow(columns(n , tableoupput("something")))
# 1개의 로우를 지정해줌 , coumns에 숫자지정하여 크기 assign
library(dplyr)
library(ggplot2)
library(forcats)
library(vroom)
library(shiny)
if (!exists("injuries")) {
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("products.tsv")
population <- vroom::vroom("population.tsv")
}
ui <- fluidPage(
#<< first-row
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
#>>
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
),
#<< narrative-ui
fluidRow(
column(2, actionButton("story", "Tell me a story")),
column(10, textOutput("narrative"))
)
#>>
)
count_top <- function(df, var, n = 5) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
#<< tables
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
#>>
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
#<< plot
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
#>>
#<< narrative-server
narrative_sample <- eventReactive(
list(input$story, selected()),
selected() %>% pull(narrative) %>% sample(1)
)
output$narrative <- renderText(narrative_sample())
#>>
}
shinyApp(ui, server)
selected()
selected
runApp()
selected <- reactive(injuries %>% filter(prod_code == input$code)
selected
selected()
injuries %>% filter(prod_code == input$code)
injuries <- vroom::vroom("injuries.tsv.gz")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- reactive(injuries %>% filter(prod_code == input$code)
selected
injuries %>% filter(prod_code == input$code)
injuries %>% filter(prod_code == input$code)
# fluidrow(columns(n , tableoupput("something")))
# 1개의 로우를 지정해줌 , coumns에 숫자지정하여 크기 assign
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
runApp()
install.packages("mediana")
install.packages("Mediana")
help("Mediana")
help(package  = "Mediana")
ls("package:Mediana")
help(package  = "Mediana")
help(package  = "ggplot2")
help(package  = "Mediana")
ggplot2
help(package  = "ggplot2")
help(package  = "Mediana")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
diag
runApp()
